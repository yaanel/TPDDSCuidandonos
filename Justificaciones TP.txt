Aclaración del TP en general: El DC contempla la implementación del punto 2 directamente, ya que el punto 1 está incluido en el mismo.


Justifaciones de Patrones de Diseño:

Usamos Patrón State para el modelado de los usuarios activos y pasivos, considerando usuarios
activos a los transeúntes y pasivos a los cuidadores. 
Utilizamos este patrón, para que así, quien use la aplicación, pueda cambiar su estado como usuario, 
pudiendo así elegir ser un usuario activo y solicitar viajes, o ser un usuario pasivo y cuidar transeúntes.
Además, este patrón contempla bien el caso de que un usuario no puede ser transeúnte y cuidador a la vez.

Para el envío de las notificaciones usamos el Patrón Strategy, pudiendo así enviar distintas 
notificaciones a los cuidadores, según la situación lo amerite. 

Para las situaciones también utilizamos el Patrón Strategy para poder elegir el accionar
dependiendo de la situación, pudiendo también agregar más situaciones a futuro con mayor
facilidad.

Para la implementación de la API "DistanceMatrixAPI" usamos el patrón Adapter, ya que sabemos
que la API ofrece un método que calcula la distancia entre dos direcciones, pero no sabemos 
si las direcciones que recibe están modeladas igual que las nuestras, o el cómo está 
implementada la API mismamente, entonces, necesitamos de una clase puente.



Justificaciones de Diseño en general:

La Persona cambia de tipo de usuario manualmente, siempre y cuando la misma no se encuentre viajando 
(en cuyo caso, ya tendría un tipo de usuario asignado dependiendo su rol en el viaje).

Cuando las clases "Pasivo" (cuidadores) y "Activo" (transeúntes) hacen la invocación de sus métodos "realizarViaje",
las mismas realizan sus funciones específicas para empezar el proceso de un viaje; en el caso del transeúnte sería solicitarlo
y en el caso del cuidador sería aceptarlo. 

Cuando un cuidador acepta un viaje, se agrega a sí mismo a la lista de cuidadores del viaje que aceptó.
Esto también implica que la lista de cuidadores del viaje incluye únicamente a los cuidadores que aceptaron.
Si la lista está vacía, no se podrá comenzar el viaje, ya que ningún cuidador habrá aceptado.

Si en el Viaje el atributo "seDetieneEnParadas" es falso, las páradas van a tener un tiempoEnParada = 0.